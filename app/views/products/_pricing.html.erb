<%
  # I wanted to put this in the hooks file but apparently the hooks get loaded so early in the process that the db connection hasn't yet been established
  if Spree::Config[:use_ajax_pricing_updates]
%>

<% content_for :head do %>
  <%= javascript_include_tag 'jquery.formatCurrency-1.4.0.min' %>
  <%= javascript_tag do %>

    // First I need to set up a mapping for the variants on the screen so I can easily grab their prices

    var variant_price_map={};

    <% if @product.has_variants? %>
      <% @product.variants.active.each_with_index do |v,index| %>
	variant_price_map[<%= v.id %>]= <%= v.price %>;
      <% end %>
    <% end %>


    // we start off the page w/ a known base price, a known set of
    // possible configurations (ad_hoc_option_values), and no customizations

    // 'updatePrice()' takes the base price + current 'configuration' adjustments + 'customization' adjustments

    var base_price=<%= @product.price %>;

    // keep track of ad_hoc adjustments
    var price_modifier_map={};

    <%  @product.ad_hoc_option_types.each do |pot| %>
      <% pot.option_values.each do |pov| %>
	price_modifier_map[<%= pov.id %>]= <%= pov.price_modifier %>;
      <% end %>
    <% end %>


    var delay = (function(){
      var timer = 0;
      return function(callback, ms){
        clearTimeout (timer);
        timer = setTimeout(callback, ms);
      };
    })();

    $(function() {

      // watch for variant changes
      $("#product-variants input[type='radio']").change(function() {
        updatePrice();
      });

      // 'watch' our configurations
      $('.ad-hoc-option-select').change(function() {

        // get _every_ option drop down and recalculate product price
        // do this immediately, since we are not waiting on the results of the exlusions post
	updatePrice();
      });

    // 'watch' our customizations // TODO: need to make sure we cover all types of form inputs
    $('.customization').keyup(function() {
        delay(function(){

          // need to do the ajax call here to compute price, then put the results into the
          // corresponding 'customizations_price' dom object

	  if ($("#cart-form form").validate().form()) {  // don't attempt to compute price if we are in an invalid state

    	    $('.price.selling').html('<img src="/images/ajax_loader.gif" style="float: none;"/>');

            // we are going to serialize _all_ the form inputs, and send them to our 'price' controller method
            $.post('/product_customizations/price', $("#cart-form form").serialize(), function(data) {
  	      $('#customizations_price').val(parseFloat(data).toFixed(2));
  	      updatePrice();
            } );
	  }
        }, 1000 ); // delay
      }); // keyup

      updatePrice(); // set the initial price
    } // ready
  ); // ready

  // stolen from http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric
  function isNumeric(input) {
    return (input - 0) == input && input.length > 0;
  }

  function compute_variant_price_diff(base_price) {
    var variant_price=0;

    $("#product-variants input[type='radio']:checked").each (function() {
      variant_price=variant_price_map[$(this).val()];
    });

    <% if @product.has_variants? %>
      return variant_price-base_price;
    <% else %>
      return variant_price;  // don't return a negative number if we don't have any variants
    <% end %>

  }

  function compute_configuration_price() {
    var configuration_price=0;

    // for selects or checkboxes
    $("select.ad-hoc-option-select, input:checked.ad-hoc-option-select").each(function() {
      // the :prompt=>'None' in the select tag yields an empty string, which I can't use in the price calcuation
      var val=$(this).val();

      if (isNumeric(val)) {
        configuration_price+=price_modifier_map[val];
      }
    });

    return configuration_price;
  }

  function compute_customization_price() {
    // we simply return the 'data' attached to the dom element, since whenever we
    // 'mouseout'/'change' etc., we go to the server to get and cache this data
    return parseFloat($('#customizations_price').val());
  }


  function updatePrice() {

    var cur_variant_price_diff       = compute_variant_price_diff(base_price);
    var cur_configuration_price =  compute_configuration_price();
    var cur_customization_price =  compute_customization_price();
    var cur_price =base_price + cur_variant_price_diff + cur_configuration_price + cur_customization_price;

    $('.price.selling').text(cur_price.toFixed(2)).formatCurrency();
  }

  <% end %>
<% end %>


<%# end if Spree::Config[:use_ajax_pricing_updates] %>
<% end %>
